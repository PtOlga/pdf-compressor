#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mega –∏ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

print("=" * 70)
print("üîç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö MEGA")
print("=" * 70)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
email = os.getenv('MEGA_EMAIL')
password = os.getenv('MEGA_PASSWORD')

print(f"\nüîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
print(f"   Email: {email if email else '‚ùå NOT SET'}")
print(f"   Password: {'‚úÖ SET' if password else '‚ùå NOT SET'}")

if not email or not password:
    print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã MEGA_EMAIL –∏ MEGA_PASSWORD")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

print("\n‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mega...")

try:
    from mega import Mega
    
    mega = Mega()
    m = mega.login(email, password)
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Mega!")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–µ
    print("\nüíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–æ—Ç–µ:")
    try:
        quota = m.get_quota()
        total = quota.get('total', 0)
        used = quota.get('used', 0)
        free = total - used
        
        def format_size(b):
            for unit in ['B', 'KB', 'MB', 'GB']:
                if b < 1024:
                    return f"{b:.1f} {unit}"
                b /= 1024
            return f"{b:.1f} TB"
        
        print(f"   –í—Å–µ–≥–æ: {format_size(total)}")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_size(used)}")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {format_size(free)}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–≤–æ—Ç—É: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    print("\nüìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    files = m.get_files()
    
    print(f"   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(files)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ (–ø–µ—Ä–≤—ã–µ 30):")
    print(f"{'ID':<20} {'–¢–∏–ø':<8} {'–ò–º—è':<30} {'–†–∞–∑–º–µ—Ä':<12}")
    print("-" * 70)
    
    count = 0
    for file_id, file_info in files.items():
        if count >= 30:
            break
        
        if not isinstance(file_info, dict):
            continue
        
        if 'a' not in file_info:
            continue
        
        name = file_info['a'].get('n', '?')
        file_type = file_info.get('t', '?')
        size = file_info.get('s', 0)
        
        type_str = "–ü–ê–ü–ö–ê" if file_type == 1 else "–§–ê–ô–õ" if file_type == 0 else f"–¢–ò–ü{file_type}"
        
        size_str = format_size(size) if size > 0 else "-"
        
        print(f"{file_id:<20} {type_str:<8} {name:<30} {size_str:<12}")
        count += 1
    
    if len(files) > 30:
        print(f"... –∏ –µ—â–µ {len(files) - 30} –æ–±—ä–µ–∫—Ç–æ–≤")
    
    # –ò—â–µ–º –ø–∞–ø–∫—É /PDF/Input
    print("\nüîé –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ /PDF/Input...")
    
    def get_file_path(file_id, all_files):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
        try:
            path_parts = []
            current_id = file_id
            
            while current_id in all_files:
                file_info = all_files[current_id]
                if 'a' not in file_info:
                    break
                
                name = file_info['a'].get('n', '')
                if name:
                    path_parts.insert(0, name)
                
                parent_id = file_info.get('p')
                if not parent_id:
                    break
                    
                current_id = parent_id
            
            if path_parts:
                return '/' + '/'.join(path_parts)
            else:
                return ''
        except Exception:
            return ''
    
    input_folder = "/PDF/Input"
    found_files = []
    
    for file_id, file_info in files.items():
        if not isinstance(file_info, dict) or 'a' not in file_info:
            continue
        
        name = file_info['a'].get('n', '')
        file_path = get_file_path(file_id, files)
        size = file_info.get('s', 0)
        file_type = file_info.get('t', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ
        if file_path and file_path.startswith(input_folder.rstrip('/')):
            if name.lower().endswith(('.pdf', '.PDF')):
                found_files.append({
                    'name': name,
                    'path': file_path,
                    'size': size,
                    'id': file_id
                })
    
    if found_files:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_files)} PDF —Ñ–∞–π–ª–æ–≤:")
        for f in found_files:
            print(f"   üìÑ {f['name']}")
            print(f"      –ü—É—Ç—å: {f['path']}")
            print(f"      –†–∞–∑–º–µ—Ä: {format_size(f['size'])}")
            print(f"      ID: {f['id']}")
    else:
        print(f"‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {input_folder}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∞–º–∞ –ø–∞–ø–∫–∞
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ {input_folder}...")
        
        folder_exists = False
        for file_id, file_info in files.items():
            if not isinstance(file_info, dict) or 'a' not in file_info:
                continue
            
            file_path = get_file_path(file_id, files)
            file_type = file_info.get('t', 0)
            
            if file_path == input_folder and file_type == 1:
                print(f"‚úÖ –ü–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!")
                folder_exists = True
                break
        
        if not folder_exists:
            print(f"‚ùå –ü–∞–ø–∫–∞ {input_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print(f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏:")
            
            folders = []
            for file_id, file_info in files.items():
                if not isinstance(file_info, dict) or 'a' not in file_info:
                    continue
                
                file_type = file_info.get('t', 0)
                if file_type == 1:  # –ü–∞–ø–∫–∞
                    file_path = get_file_path(file_id, files)
                    if file_path:
                        folders.append(file_path)
            
            folders.sort()
            for folder in folders[:20]:
                print(f"   üìÅ {folder}")
            
            if len(folders) > 20:
                print(f"   ... –∏ –µ—â–µ {len(folders) - 20} –ø–∞–ø–æ–∫")

except ImportError:
    print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mega.py –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install mega.py")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "=" * 70)

