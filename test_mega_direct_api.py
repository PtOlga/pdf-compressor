#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mega API –±–µ–∑ mega.py
"""

import os
import json
import hashlib
import requests
import time

print("=" * 70)
print("üß™ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mega API")
print("=" * 70)

# –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
email = os.getenv('MEGA_EMAIL')
password = os.getenv('MEGA_PASSWORD')

if not email or not password:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã MEGA_EMAIL –∏ MEGA_PASSWORD")
    exit(1)

print(f"\nüìß Email: {email}")
print(f"üîë Password: {'*' * len(password)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
def prepare_key(password):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è"""
    aes_key = [0x93, 0xC4, 0x67, 0xE3, 0x7D, 0xB0, 0xC7, 0xA4,
               0xD1, 0xBE, 0x3F, 0x81, 0x01, 0x52, 0xCB, 0x56]
    
    password_bytes = password.encode('utf-8')
    
    for i in range(65536):
        for j in range(0, len(password_bytes), 16):
            chunk = password_bytes[j:j+16]
            chunk = chunk + b'\x00' * (16 - len(chunk))
            
            for k in range(16):
                aes_key[k] ^= chunk[k]
    
    return aes_key

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è user_hash
def compute_user_hash(email, password_key):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ user_hash"""
    email_bytes = email.lower().encode('utf-8')
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA256 –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    hash_obj = hashlib.sha256()
    hash_obj.update(email_bytes)
    
    return hash_obj.hexdigest()[:16]

print("\nüîê –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mega API...")

try:
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á
    password_key = prepare_key(password)
    print("   ‚úÖ –ö–ª—é—á –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")
    
    # –í—ã—á–∏—Å–ª—è–µ–º user_hash
    user_hash = compute_user_hash(email, password_key)
    print(f"   ‚úÖ User hash –≤—ã—á–∏—Å–ª–µ–Ω: {user_hash}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    url = 'https://g.api.mega.co.nz/cs'
    
    payload = {
        'a': 'us',
        'user': email,
        'uh': user_hash
    }
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
        'Content-Type': 'application/json'
    }
    
    print(f"\nüì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ {url}")
    print(f"   Payload: {json.dumps(payload, indent=2)}")
    
    for attempt in range(3):
        try:
            print(f"\n   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3...")
            response = requests.post(url, json=payload, headers=headers, timeout=15)
            
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   üìè –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.text)} –±–∞–π—Ç")
            
            if response.text:
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text[:200]}")
                
                try:
                    data = response.json()
                    print(f"   ‚úÖ JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    print(f"   üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2)[:500]}")
                except json.JSONDecodeError as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            else:
                print(f"   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API!")
            
            break
            
        except requests.exceptions.Timeout:
            print(f"   ‚è±Ô∏è Timeout! –ñ–¥—É 5 —Å–µ–∫...")
            time.sleep(5)
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            if attempt < 2:
                time.sleep(5)
            else:
                raise

except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
    exit(1)

print("\n" + "=" * 70)
print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
print("=" * 70)

