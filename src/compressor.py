#!/usr/bin/env python3
"""
PDF –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–∂–∞—Ç–∏—è –∏ fallback-–ª–æ–≥–∏–∫–æ–π
"""

import os
import subprocess
import logging
from pathlib import Path
from typing import Dict, Any, Optional
import shutil

# PDF –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from pypdf import PdfReader, PdfWriter
import pikepdf

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from config import get_config
from utils import calculate_savings, format_file_size


class PDFCompressor:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∂–∞—Ç–∏—è PDF —Ñ–∞–π–ª–æ–≤ —Å fallback-–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    
    def __init__(self, level: str = "medium"):
        self.config = get_config()
        self.level = level
        self.compression_settings = self.config.get_compression_settings(level)
        self.logger = logging.getLogger(__name__)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.available_tools = self._check_available_tools()
        
        if not self.available_tools:
            self.logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è PDF")
    
    def _check_available_tools(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–∂–∞—Ç–∏—è"""
        tools = {}
        
        # Ghostscript
        try:
            result = subprocess.run(['gs', '--version'], 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=10)
            tools['ghostscript'] = result.returncode == 0
            if tools['ghostscript']:
                self.logger.info(f"‚úÖ Ghostscript –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
        except (subprocess.SubprocessError, FileNotFoundError):
            tools['ghostscript'] = False
            self.logger.warning("‚ö†Ô∏è Ghostscript –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # QPDF
        try:
            result = subprocess.run(['qpdf', '--version'], 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=10)
            tools['qpdf'] = result.returncode == 0
            if tools['qpdf']:
                self.logger.info(f"‚úÖ QPDF –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
        except (subprocess.SubprocessError, FileNotFoundError):
            tools['qpdf'] = False
            self.logger.warning("‚ö†Ô∏è QPDF –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
        tools['pikepdf'] = True
        tools['pypdf'] = True
        
        return tools
    
    def compress(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è PDF —Ñ–∞–π–ª–∞
        
        Args:
            input_path: –ø—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_path: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∂–∞—Ç–∏—è
        """
        input_file = Path(input_path)
        output_file = Path(output_path)
        
        if not input_file.exists():
            return self._error_result(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        original_size = input_file.stat().st_size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        max_size_bytes = self.config.max_file_size_mb * 1024 * 1024
        if original_size > max_size_bytes:
            return self._error_result(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {format_file_size(original_size)} > "
                f"{self.config.max_file_size_mb} MB"
            )
        
        min_size_bytes = self.config.min_file_size_kb * 1024
        if original_size < min_size_bytes:
            return self._success_result(
                input_path, output_path, original_size, original_size,
                "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –¥–ª—è —Å–∂–∞—Ç–∏—è - —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            )
        
        self.logger.info(f"üóúÔ∏è –ù–∞—á–∏–Ω–∞—é —Å–∂–∞—Ç–∏–µ {input_file.name} "
                        f"({format_file_size(original_size)}) —É—Ä–æ–≤–µ–Ω—å: {self.level}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        analysis = self._analyze_pdf(input_path)
        self.logger.info(
            "üîé –ê–Ω–∞–ª–∏–∑: pages=%s, images=%s, forms=%s, annots=%s, encrypted=%s",
            analysis.get('pages', 0),
            analysis.get('has_images', False),
            analysis.get('has_forms', False),
            analysis.get('has_annotations', False),
            analysis.get('encrypted', False),
        )
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if analysis.get('has_images') and not (analysis.get('has_forms') or analysis.get('has_annotations')):
            content_type = 'image-heavy/scanned'
        elif analysis.get('has_forms') or analysis.get('has_annotations'):
            content_type = 'interactive/forms/annotations'
        else:
            content_type = 'text-based/standard'
        self.logger.info(f"üß≠ –¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {content_type}")

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        preferred_method = self._choose_compression_method(input_path, original_size, analysis=analysis)
        self.logger.info(f"üìä –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: {preferred_method}")

        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∂–∞—Ç–∏–µ —Å fallback
            result = self._apply_compression(input_path, output_path, preferred_method)

            if result['success'] and output_file.exists():
                compressed_size = output_file.stat().st_size
                savings = calculate_savings(original_size, compressed_size)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
                if savings['percent_saved'] < self.config.min_compression_percent:
                    self.logger.info(f"üìä –°–∂–∞—Ç–∏–µ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ ({savings['size_reduction']}), "
                                   f"–∫–æ–ø–∏—Ä—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª")
                    shutil.copy2(input_path, output_path)
                    compressed_size = original_size
                
                return self._success_result(
                    input_path, output_path, original_size, compressed_size,
                    f"–°–∂–∞—Ç–æ –º–µ—Ç–æ–¥–æ–º {result.get('method', 'unknown')}"
                )
            else:
                return result
                
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏: {str(e)}")
            return self._error_result(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    def _choose_compression_method(self, input_path: str, file_size: int, analysis: Optional[Dict[str, Any]] = None) -> str:
        """
        –í—ã–±–æ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–∂–∞—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
        """
        try:
            analysis = analysis or self._analyze_pdf(input_path)

            # –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ‚Üí Ghostscript
            if (file_size > 10 * 1024 * 1024 and
                analysis.get('has_images') and
                self.available_tools.get('ghostscript')):
                return 'ghostscript'

            # –§–∞–π–ª—ã —Å —Ñ–æ—Ä–º–∞–º–∏/–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ ‚Üí Pikepdf
            if analysis.get('has_forms') or analysis.get('has_annotations'):
                return 'pikepdf'

            # QPDF ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.available_tools.get('qpdf'):
                return 'qpdf'

            # –ò–Ω–∞—á–µ Ghostscript, –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.available_tools.get('ghostscript'):
                return 'ghostscript'

            return 'pikepdf'

        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
            return 'pikepdf'
    
    def _analyze_pdf(self, input_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ PDF —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–∂–∞—Ç–∏—è"""
        analysis = {
            'pages': 0,
            'has_images': False,
            'has_forms': False,
            'has_annotations': False,
            'encrypted': False,
            'file_size': Path(input_path).stat().st_size
        }
        
        try:
            with pikepdf.open(input_path) as pdf:
                analysis['pages'] = len(pdf.pages)
                analysis['encrypted'] = False
                
                for page in pdf.pages[:min(5, len(pdf.pages))]:
                    if '/XObject' in page.get('/Resources', {}):
                        xobjects = page['/Resources']['/XObject']
                        for obj in xobjects.values():
                            if obj.get('/Subtype') == '/Image':
                                analysis['has_images'] = True
                                break
                    
                    if '/Annots' in page:
                        analysis['has_annotations'] = True
                
                if '/AcroForm' in pdf.Root:
                    analysis['has_forms'] = True
                    
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å pikepdf: {e}")
            try:
                reader = PdfReader(input_path)
                analysis['pages'] = len(reader.pages)
                analysis['encrypted'] = reader.is_encrypted
                for page in reader.pages[:min(3, len(reader.pages))]:
                    if '/XObject' in page.get('/Resources', {}):
                        analysis['has_images'] = True
                        break
            except Exception as e2:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å pypdf: {e2}")
        
        return analysis
    
    def _apply_compression(self, input_path: str, output_path: str, preferred_method: str) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∂–∞—Ç–∏–µ —Å fallback-—Ü–µ–ø–æ—á–∫–æ–π: —Å–Ω–∞—á–∞–ª–∞ preferred_method,
        –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É. –ï—Å–ª–∏ —ç–∫–æ–Ω–æ–º–∏—è 0% –∏–ª–∏ –º–µ–Ω—å—à–µ,
        –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥.
        """
        all_methods = ['ghostscript', 'qpdf', 'pikepdf', 'pypdf']
        available_methods = [
            m for m in all_methods
            if self.available_tools.get(m, True)
        ]

        if preferred_method in available_methods:
            methods_to_try = [preferred_method] + [m for m in available_methods if m != preferred_method]
        else:
            methods_to_try = available_methods

        self.logger.debug(f"–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ: {methods_to_try}")

        last_error = None
        original_size = Path(input_path).stat().st_size if Path(input_path).exists() else 0

        for idx, method in enumerate(methods_to_try):
            self.logger.info(f"üîÑ –ü—Ä–æ–±—É—é –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è: {method}")
            try:
                if method == 'ghostscript':
                    result = self._compress_with_ghostscript(input_path, output_path)
                elif method == 'qpdf':
                    result = self._compress_with_qpdf(input_path, output_path)
                elif method == 'pikepdf':
                    result = self._compress_with_pikepdf(input_path, output_path)
                elif method == 'pypdf':
                    result = self._compress_with_pypdf(input_path, output_path)
                else:
                    result = self._error_result(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {method}")
                    continue

                if result['success']:
                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é
                    try:
                        if Path(output_path).exists() and original_size > 0:
                            out_size = Path(output_path).stat().st_size
                            savings = calculate_savings(original_size, out_size)
                            self.logger.info(
                                "   ‚Üí %s: %s (%s ‚Üí %s)",
                                method,
                                savings['size_reduction'],
                                format_file_size(original_size),
                                format_file_size(out_size)
                            )
                            # –ï—Å–ª–∏ –Ω–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –∏ –µ—Å—Ç—å –µ—â—ë –º–µ—Ç–æ–¥—ã ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                            if savings['percent_saved'] <= 0 and idx < len(methods_to_try) - 1:
                                self.logger.info("üìâ –í—ã–∏–≥—Ä—ã—à 0%%, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥...")
                                try:
                                    Path(output_path).unlink(missing_ok=True)
                                except Exception:
                                    pass
                                continue
                    except Exception as e:
                        self.logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—é: {e}")

                    result['method'] = method
                    return result
                else:
                    error_msg = result.get('error') or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    self.logger.warning(f"–ú–µ—Ç–æ–¥ {method} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π: {error_msg}")
                    last_error = error_msg

            except Exception as e:
                error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {method}: {str(e)}"
                self.logger.error(error_msg)
                last_error = error_msg
                continue

        final_error = f"–í—Å–µ –º–µ—Ç–æ–¥—ã —Å–∂–∞—Ç–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}"
        self.logger.error(final_error)
        return self._error_result(final_error)

    def _compress_with_ghostscript(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """–°–∂–∞—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é Ghostscript"""
        preset = self.compression_settings.get('ghostscript_preset', 'ebook')
        cmd = [
            'gs',
            '-sDEVICE=pdfwrite',
            '-dCompatibilityLevel=1.4',
            '-dPDFSETTINGS=/' + preset,
            '-dNOPAUSE',
            '-dQUIET',
            '-dBATCH',
            f'-sOutputFile={output_path}',
            input_path
        ]
        
        if self.level in ['medium', 'high']:
            image_quality = self.compression_settings.get('image_quality', 75)
            image_resolution = self.compression_settings.get('image_resolution', 150)
            additional_params = [
                f'-dColorImageResolution={image_resolution}',
                f'-dGrayImageResolution={image_resolution}',
                f'-dMonoImageResolution={image_resolution}',
                '-dColorImageDownsampleType=/Bicubic',
                '-dGrayImageDownsampleType=/Bicubic',
                '-dMonoImageDownsampleType=/Bicubic',
                f'-dColorImageDownsampleThreshold=1.0',
                f'-dGrayImageDownsampleThreshold=1.0',
                '-dOptimize=true',
                '-dEmbedAllFonts=true'
            ]
            cmd = cmd[:-2] + additional_params + cmd[-2:]
        
        try:
            self.logger.debug(f"Ghostscript –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            if result.returncode == 0:
                return {'success': True, 'error': None}
            else:
                error_msg = result.stderr or f"Ghostscript –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}"
                return self._error_result(f"Ghostscript –æ—à–∏–±–∫–∞: {error_msg}")
        except subprocess.TimeoutExpired:
            return self._error_result("Ghostscript –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω)")
        except Exception as e:
            return self._error_result(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ghostscript: {str(e)}")
    
    def _compress_with_qpdf(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """–°–∂–∞—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é QPDF"""
        cmd = [
            'qpdf',
            '--linearize',
            '--compress-streams=y',
            '--recompress-flate',
            '--compression-level=9',
            input_path,
            output_path
        ]
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=180)
            if result.returncode == 0:
                return {'success': True, 'error': None}
            elif result.returncode == 3 or "operation succeeded with warnings" in result.stderr:
                self.logger.debug(f"QPDF warning (non-critical): {result.stderr}")
                return {"success": True, "error": None}
            else:
                error_msg = result.stderr or f"QPDF –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}"
                return self._error_result(f"QPDF –æ—à–∏–±–∫–∞: {error_msg}")
        except subprocess.TimeoutExpired:
            return self._error_result("QPDF –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        except Exception as e:
            return self._error_result(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ QPDF: {str(e)}")
    
    def _compress_with_pikepdf(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """–°–∂–∞—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é Pikepdf —Å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∫ –æ—à–∏–±–∫–∞–º –ø–æ—Ç–æ–∫–æ–≤"""
        try:
            with pikepdf.open(input_path) as pdf:
                for page in pdf.pages:
                    try:
                        page.compress_content_streams()
                    except Exception as e:
                        self.logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –ø–æ—Ç–æ–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    if self.level == 'high':
                        self._optimize_page_images(page)
                pdf.remove_unreferenced_resources()
                pdf.save(
                    output_path,
                    compress_streams=True,
                    stream_decode_level=pikepdf.StreamDecodeLevel.all,
                    object_stream_mode=pikepdf.ObjectStreamMode.generate
                )
                return {'success': True, 'error': None}
        except Exception as e:
            return self._error_result(f"Pikepdf –æ—à–∏–±–∫–∞: {str(e)}")
    
    def _compress_with_pypdf(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """–°–∂–∞—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é PyPDF (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥)"""
        try:
            reader = PdfReader(input_path)
            writer = PdfWriter()
            for page in reader.pages:
                try:
                    page.compress_content_streams()
                except Exception as e:
                    self.logger.debug(f"‚ö†Ô∏è PyPDF –Ω–µ —Å–º–æ–≥ —Å–∂–∞—Ç—å –ø–æ—Ç–æ–∫–∏: {e}")
                writer.add_page(page)
            # writer.remove_duplicates()  # removed: not available in pypdf 4.x
            with open(output_path, 'wb') as f:
                writer.write(f)
            return {'success': True, 'error': None}
        except Exception as e:
            return self._error_result(f"PyPDF –æ—à–∏–±–∫–∞: {str(e)}")
    
    def _optimize_page_images(self, page):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        pass
    
    def _success_result(self, input_path: str, output_path: str, 
                       size_before: int, size_after: int, message: str = "") -> Dict[str, Any]:
        savings = calculate_savings(size_before, size_after)
        return {
            'success': True,
            'input_path': input_path,
            'output_path': output_path,
            'size_before': size_before,
            'size_after': size_after,
            'bytes_saved': savings['bytes_saved'],
            'percent_saved': savings['percent_saved'],
            'compression_ratio': savings['compression_ratio'],
            'message': message,
            'error': None
        }
    
    def _error_result(self, error_message: str) -> Dict[str, Any]:
        return {
            'success': False,
            'input_path': None,
            'output_path': None,
            'size_before': 0,
            'size_after': 0,
            'bytes_saved': 0,
            'percent_saved': 0,
            'compression_ratio': 0,
            'message': "",
            'error': error_message
        }
    
    def verify_compressed_file(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∂–∞—Ç–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
        try:
            with pikepdf.open(file_path):
                pass
            reader = PdfReader(file_path)
            len(reader.pages)
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ {file_path} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return False
    
    def get_compression_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞"""
        return {
            'level': self.level,
            'settings': self.compression_settings,
            'available_tools': self.available_tools,
            'max_file_size_mb': self.config.max_file_size_mb,
            'min_file_size_kb': self.config.min_file_size_kb,
            'min_compression_percent': self.config.min_compression_percent
        }


def test_compressor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞"""
    import tempfile
    from reportlab.lib.pagesizes import letter
    from reportlab.pdfgen import canvas
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞...")
    
    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as test_input:
        c = canvas.Canvas(test_input.name, pagesize=letter)
        width, height = letter
        for i in range(100):
            c.drawString(100, height - 50 - i*10, f"–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä {i} " * 10)
        c.save()
        test_input_path = test_input.name

    compressor = PDFCompressor(level="medium")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {compressor.available_tools}")

    with tempfile.NamedTemporaryFile(suffix='_compressed.pdf', delete=False) as test_output:
        test_output_path = test_output.name

    result = compressor.compress(test_input_path, test_output_path)

    if result['success']:
        print(f"‚úÖ –°–∂–∞—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   üìÑ –†–∞–∑–º–µ—Ä –¥–æ: {format_file_size(result['size_before'])}")
        print(f"   üìÑ –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ: {format_file_size(result['size_after'])}")
        print(f"   üíæ –≠–∫–æ–Ω–æ–º–∏—è: {result['percent_saved']:.1f}%")
        print(f"   üîß –ú–µ—Ç–æ–¥: {result.get('method', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {result['error']}")
    
    Path(test_input_path).unlink(missing_ok=True)
    Path(test_output_path).unlink(missing_ok=True)


if __name__ == "__main__":
    test_compressor()