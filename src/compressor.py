#!/usr/bin/env python3
"""
PDF –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–∂–∞—Ç–∏—è
"""

import os
import subprocess
import logging
from pathlib import Path
from typing import Dict, Any, Optional, Tuple
import tempfile
import shutil

# PDF –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from pypdf import PdfReader, PdfWriter
import pikepdf
from PIL import Image

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from config import get_config
from utils import calculate_savings, format_file_size


class PDFCompressor:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∂–∞—Ç–∏—è PDF —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, level: str = "medium"):
        self.config = get_config()
        self.level = level
        self.compression_settings = self.config.get_compression_settings(level)
        self.logger = logging.getLogger(__name__)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.available_tools = self._check_available_tools()
        
        if not self.available_tools:
            self.logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è PDF")
    
    def _check_available_tools(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–∂–∞—Ç–∏—è"""
        tools = {}
        
        # Ghostscript
        try:
            result = subprocess.run(['gs', '--version'], 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=10)
            tools['ghostscript'] = result.returncode == 0
            if tools['ghostscript']:
                self.logger.info(f"‚úÖ Ghostscript –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
        except (subprocess.SubprocessError, FileNotFoundError):
            tools['ghostscript'] = False
            self.logger.warning("‚ö†Ô∏è Ghostscript –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # QPDF
        try:
            result = subprocess.run(['qpdf', '--version'], 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=10)
            tools['qpdf'] = result.returncode == 0
            if tools['qpdf']:
                self.logger.info(f"‚úÖ QPDF –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
        except (subprocess.SubprocessError, FileNotFoundError):
            tools['qpdf'] = False
            self.logger.warning("‚ö†Ô∏è QPDF –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
        tools['pikepdf'] = True
        tools['pypdf'] = True
        
        return tools
    
    def compress(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è PDF —Ñ–∞–π–ª–∞
        
        Args:
            input_path: –ø—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_path: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∂–∞—Ç–∏—è
        """
        input_file = Path(input_path)
        output_file = Path(output_path)
        
        if not input_file.exists():
            return self._error_result(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        original_size = input_file.stat().st_size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        max_size_bytes = self.config.max_file_size_mb * 1024 * 1024
        if original_size > max_size_bytes:
            return self._error_result(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {format_file_size(original_size)} > "
                f"{self.config.max_file_size_mb} MB"
            )
        
        min_size_bytes = self.config.min_file_size_kb * 1024
        if original_size < min_size_bytes:
            return self._success_result(
                input_path, output_path, original_size, original_size,
                "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –¥–ª—è —Å–∂–∞—Ç–∏—è - —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            )
        
        self.logger.info(f"üóúÔ∏è –ù–∞—á–∏–Ω–∞—é —Å–∂–∞—Ç–∏–µ {input_file.name} "
                        f"({format_file_size(original_size)}) —É—Ä–æ–≤–µ–Ω—å: {self.level}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–∂–∞—Ç–∏—è
        compression_method = self._choose_compression_method(input_path, original_size)
        self.logger.info(f"üìä –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥: {compression_method}")
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∂–∞—Ç–∏–µ
            result = self._apply_compression(input_path, output_path, compression_method)
            
            if result['success'] and output_file.exists():
                compressed_size = output_file.stat().st_size
                savings = calculate_savings(original_size, compressed_size)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
                if savings['percent_saved'] < self.config.min_compression_percent:
                    self.logger.info(f"üìä –°–∂–∞—Ç–∏–µ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ ({savings['size_reduction']}), "
                                   f"–∫–æ–ø–∏—Ä—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª")
                    shutil.copy2(input_path, output_path)
                    compressed_size = original_size
                
                return self._success_result(
                    input_path, output_path, original_size, compressed_size,
                    f"–°–∂–∞—Ç–æ –º–µ—Ç–æ–¥–æ–º {compression_method}"
                )
            else:
                return result
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏: {str(e)}")
            return self._error_result(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {str(e)}")
    
    def _choose_compression_method(self, input_path: str, file_size: int) -> str:
        """
        –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–∂–∞—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
        """
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF —Ñ–∞–π–ª
            analysis = self._analyze_pdf(input_path)
            
            # –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ - Ghostscript
            if (file_size > 10 * 1024 * 1024 and 
                analysis['has_images'] and 
                self.available_tools.get('ghostscript')):
                return 'ghostscript'
            
            # –§–∞–π–ª—ã —Å —Ñ–æ—Ä–º–∞–º–∏ –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ - Pikepdf (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
            if analysis['has_forms'] or analysis['has_annotations']:
                return 'pikepdf'
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω QPDF - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
            if self.available_tools.get('qpdf'):
                return 'qpdf'
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Ghostscript - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if self.available_tools.get('ghostscript'):
                return 'ghostscript'
            
            # Fallback –Ω–∞ Pikepdf
            return 'pikepdf'
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            return 'pikepdf'
    
    def _analyze_pdf(self, input_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ PDF —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–∂–∞—Ç–∏—è"""
        analysis = {
            'pages': 0,
            'has_images': False,
            'has_forms': False,
            'has_annotations': False,
            'encrypted': False,
            'file_size': Path(input_path).stat().st_size
        }
        
        try:
            with pikepdf.open(input_path) as pdf:
                analysis['pages'] = len(pdf.pages)
                analysis['encrypted'] = False  # –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã–ª—Å—è, —Ç–æ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                for page in pdf.pages[:min(5, len(pdf.pages))]:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
                    if '/XObject' in page.get('/Resources', {}):
                        xobjects = page['/Resources']['/XObject']
                        for obj in xobjects.values():
                            if obj.get('/Subtype') == '/Image':
                                analysis['has_images'] = True
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                    if '/Annots' in page:
                        analysis['has_annotations'] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—ã (AcroForm)
                if '/AcroForm' in pdf.Root:
                    analysis['has_forms'] = True
                    
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å pikepdf: {e}")
            # –ü—Ä–æ–±—É–µ–º pypdf
            try:
                reader = PdfReader(input_path)
                analysis['pages'] = len(reader.pages)
                analysis['encrypted'] = reader.is_encrypted
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                for page in reader.pages[:min(3, len(reader.pages))]:
                    if '/XObject' in page.get('/Resources', {}):
                        analysis['has_images'] = True
                        break
                        
            except Exception as e2:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å pypdf: {e2}")
        
        return analysis
    
    def _apply_compression(self, input_path: str, output_path: str, method: str) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–∂–∞—Ç–∏—è"""
        
        try:
            if method == 'ghostscript' and self.available_tools.get('ghostscript'):
                return self._compress_with_ghostscript(input_path, output_path)
            elif method == 'qpdf' and self.available_tools.get('qpdf'):
                return self._compress_with_qpdf(input_path, output_path)
            elif method == 'pikepdf':
                return self._compress_with_pikepdf(input_path, output_path)
            else:
                # Fallback –Ω–∞ pypdf
                return self._compress_with_pypdf(input_path, output_path)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ {method}: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥
            if method != 'pikepdf':
                self.logger.info("üîÑ –ü—Ä–æ–±—É—é –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥: pikepdf")
                return self._compress_with_pikepdf(input_path, output_path)
            else:
                return self._error_result(f"–í—Å–µ –º–µ—Ç–æ–¥—ã —Å–∂–∞—Ç–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å: {str(e)}")
    
    def _compress_with_ghostscript(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """–°–∂–∞—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é Ghostscript"""
        preset = self.compression_settings.get('ghostscript_preset', 'ebook')
        
        # –ö–æ–º–∞–Ω–¥–∞ Ghostscript
        cmd = [
            'gs',
            '-sDEVICE=pdfwrite',
            '-dCompatibilityLevel=1.4',
            '-dPDFSETTINGS=/' + preset,
            '-dNOPAUSE',
            '-dQUIET',
            '-dBATCH',
            f'-sOutputFile={output_path}',
            input_path
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
        if self.level in ['medium', 'high']:
            image_quality = self.compression_settings.get('image_quality', 75)
            image_resolution = self.compression_settings.get('image_resolution', 150)
            
            additional_params = [
                f'-dColorImageResolution={image_resolution}',
                f'-dGrayImageResolution={image_resolution}',
                f'-dMonoImageResolution={image_resolution}',
                '-dColorImageDownsampleType=/Bicubic',
                '-dGrayImageDownsampleType=/Bicubic',
                '-dMonoImageDownsampleType=/Bicubic',
                f'-dColorImageDownsampleThreshold=1.0',
                f'-dGrayImageDownsampleThreshold=1.0',
                '-dOptimize=true',
                '-dEmbedAllFonts=true'
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–≤—É–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            cmd = cmd[:-2] + additional_params + cmd[-2:]
        
        try:
            self.logger.debug(f"Ghostscript –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            result = subprocess.run(cmd, 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            
            if result.returncode == 0:
                return {'success': True, 'method': 'ghostscript', 'error': None}
            else:
                error_msg = result.stderr or f"Ghostscript –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}"
                return self._error_result(f"Ghostscript –æ—à–∏–±–∫–∞: {error_msg}")
                
        except subprocess.TimeoutExpired:
            return self._error_result("Ghostscript –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω)")
        except Exception as e:
            return self._error_result(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ghostscript: {str(e)}")
    
    def _compress_with_qpdf(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """–°–∂–∞—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é QPDF"""
        cmd = [
            'qpdf', 
            '--linearize',  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ–±
            '--compress-streams=y',
            '--recompress-flate',
            '--compression-level=9',
            input_path, 
            output_path
        ]
        
        try:
            result = subprocess.run(cmd, 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=180)  # 3 –º–∏–Ω—É—Ç—ã
            
            if result.returncode == 0:
                return {'success': True, 'method': 'qpdf', 'error': None}
            elif result.returncode == 3 or "operation succeeded with warnings" in result.stderr:
                # Warnings are OK - file was processed successfully
                self.logger.debug(f"QPDF warning (non-critical): {result.stderr}")
                return {"success": True, "method": "qpdf", "error": None}
            else:
                error_msg = result.stderr or f"QPDF –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}"
                return self._error_result(f"QPDF –æ—à–∏–±–∫–∞: {error_msg}")
                
        except subprocess.TimeoutExpired:
            return self._error_result("QPDF –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        except Exception as e:
            return self._error_result(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ QPDF: {str(e)}")
    
    def _compress_with_pikepdf(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """–°–∂–∞—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é Pikepdf"""
        try:
            with pikepdf.open(input_path) as pdf:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                for page in pdf.pages:
                    # –°–∂–∏–º–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü
                    page.compress_content_streams()
                    
                    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å high)
                    if self.level == 'high':
                        self._optimize_page_images(page)
                
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
                pdf.remove_unreferenced_resources()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º
                pdf.save(output_path, 
                        compress_streams=True,
                        stream_decode_level=pikepdf.StreamDecodeLevel.all,
                        object_stream_mode=pikepdf.ObjectStreamMode.generate,
                        minimize_size=True)
                
                return {'success': True, 'method': 'pikepdf', 'error': None}
                
        except Exception as e:
            return self._error_result(f"Pikepdf –æ—à–∏–±–∫–∞: {str(e)}")
    
    def _compress_with_pypdf(self, input_path: str, output_path: str) -> Dict[str, Any]:
        """–°–∂–∞—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é PyPDF (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥)"""
        try:
            reader = PdfReader(input_path)
            writer = PdfWriter()
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–æ–º–ø—Ä–µ—Å—Å–∏–µ–π
            for page in reader.pages:
                page.compress_content_streams()  # –°–∂–∏–º–∞–µ–º –ø–æ—Ç–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                writer.add_page(page)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤
            writer.remove_duplicates()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(output_path, 'wb') as output_file:
                writer.write(output_file)
                
            return {'success': True, 'method': 'pypdf', 'error': None}
            
        except Exception as e:
            return self._error_result(f"PyPDF –æ—à–∏–±–∫–∞: {str(e)}")
    
    def _optimize_page_images(self, page):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        try:
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
            pass
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    def _success_result(self, input_path: str, output_path: str, 
                       size_before: int, size_after: int, message: str = "") -> Dict[str, Any]:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è"""
        savings = calculate_savings(size_before, size_after)
        
        return {
            'success': True,
            'input_path': input_path,
            'output_path': output_path,
            'size_before': size_before,
            'size_after': size_after,
            'bytes_saved': savings['bytes_saved'],
            'percent_saved': savings['percent_saved'],
            'compression_ratio': savings['compression_ratio'],
            'message': message,
            'error': None
        }
    
    def _error_result(self, error_message: str) -> Dict[str, Any]:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—à–∏–±–∫–∏"""
        return {
            'success': False,
            'input_path': None,
            'output_path': None,
            'size_before': 0,
            'size_after': 0,
            'bytes_saved': 0,
            'percent_saved': 0,
            'compression_ratio': 0,
            'message': "",
            'error': error_message
        }
    
    def verify_compressed_file(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∂–∞—Ç–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–º–æ—â—å—é pikepdf
            with pikepdf.open(file_path):
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–º–æ—â—å—é pypdf
            reader = PdfReader(file_path)
            len(reader.pages)  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ {file_path} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return False
    
    def get_compression_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞"""
        return {
            'level': self.level,
            'settings': self.compression_settings,
            'available_tools': self.available_tools,
            'max_file_size_mb': self.config.max_file_size_mb,
            'min_file_size_kb': self.config.min_file_size_kb,
            'min_compression_percent': self.config.min_compression_percent
        }


def test_compressor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞"""
    import tempfile
    from reportlab.lib.pagesizes import letter
    from reportlab.pdfgen import canvas
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as test_input:
        c = canvas.Canvas(test_input.name, pagesize=letter)
        width, height = letter
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        for i in range(100):
            c.drawString(100, height - 50 - i*10, f"–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä {i} " * 10)
        
        c.save()
        test_input_path = test_input.name
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä
    compressor = PDFCompressor(level="medium")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {compressor.available_tools}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∂–∞—Ç–∏–µ
    with tempfile.NamedTemporaryFile(suffix='_compressed.pdf', delete=False) as test_output:
        test_output_path = test_output.name
    
    result = compressor.compress(test_input_path, test_output_path)
    
    if result['success']:
        print(f"‚úÖ –°–∂–∞—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   üìÑ –†–∞–∑–º–µ—Ä –¥–æ: {format_file_size(result['size_before'])}")
        print(f"   üìÑ –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ: {format_file_size(result['size_after'])}")
        print(f"   üíæ –≠–∫–æ–Ω–æ–º–∏—è: {result['percent_saved']:.1f}%")
        print(f"   üîß –ú–µ—Ç–æ–¥: {result.get('method', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {result['error']}")
    
    # –û—á–∏—Å—Ç–∫–∞
    Path(test_input_path).unlink(missing_ok=True)
    Path(test_output_path).unlink(missing_ok=True)


if __name__ == "__main__":
    test_compressor()
