#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç PDF –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ –¥–ª—è Mega
"""

import argparse
import sys
import logging
from pathlib import Path
from datetime import datetime, timezone
import json
import traceback
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from utils import setup_logging, format_file_size, format_duration, print_banner, create_temp_dirs, cleanup_temp_files, save_statistics
from config import get_config
from compressor import PDFCompressor
from rclone_client import RcloneClient
from megacmd_client import MegaWebDAVClient


class PDFBatchCompressor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è PDF"""
    
    def __init__(self, source_folder: str = None, target_folder: str = None, 
                 compression_level: str = None, max_files: int = None):
        self.config = get_config()
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.source_folder = source_folder or self.config.input_folder
        self.target_folder = target_folder or self.config.output_folder
        self.compression_level = compression_level or self.config.default_compression_level
        self.max_files = max_files or self.config.max_files_per_run
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'start_time': datetime.now(timezone.utc),
            'end_time': None,
            'duration': 0,
            'processed_files': 0,
            'failed_files': 0,
            'skipped_files': 0,
            'total_size_before': 0,
            'total_size_after': 0,
            'total_bytes_saved': 0,
            'total_percent_saved': 0,
            'files': [],
            'errors': [],
            'compression_level': self.compression_level,
            'source_folder': self.source_folder,
            'target_folder': self.target_folder
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.mega_client = None
        self.compressor = None
    
    def run(self) -> int:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∂–∞—Ç–∏—è
        
        Returns:
            0 –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, 1 –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        """
        try:
            self._print_startup_info()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            create_temp_dirs()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
            self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            self._initialize_clients()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.logger.info(f"üìÅ –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤ –≤: {self.source_folder}")
            pdf_files = self.mega_client.list_pdf_files(self.source_folder)
            
            if not pdf_files:
                self.logger.info("‚úÖ –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self._finalize_stats(success=True)
                return 0
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            if len(pdf_files) > self.max_files:
                self.logger.info(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ {self.max_files} —Ñ–∞–π–ª–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ {len(pdf_files)})")
                pdf_files = pdf_files[:self.max_files]
            
            self.logger.info(f"üìã –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(pdf_files)} —Ñ–∞–π–ª–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            success = self._process_files(pdf_files)
            
            # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            self._finalize_stats(success)
            self._cleanup()
            
            return 0 if success else 1
            
        except KeyboardInterrupt:
            self.logger.info("‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self._finalize_stats(success=False, error="–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return 1
            
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            self.logger.debug("–°—Ç–µ–∫ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏:", exc_info=True)
            self._finalize_stats(success=False, error=str(e))
            return 1
    
    def _print_startup_info(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ"""
        print_banner()
        
        self.logger.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:")
        self.logger.info(f"   üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {self.source_folder}")
        self.logger.info(f"   üìÅ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {self.target_folder}")
        self.logger.info(f"   üóúÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è: {self.compression_level}")
        self.logger.info(f"   üìä –ú–∞–∫—Å. —Ñ–∞–π–ª–æ–≤: {self.max_files}")
        self.logger.info(f"   ‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.stats['start_time'].strftime('%Y-%m-%d %H:%M:%S UTC')}")
    
    def _initialize_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mega –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞"""
        try:
            # Mega –∫–ª–∏–µ–Ω—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º MEGAcmd (WebDAV), –µ—Å–ª–∏ –ø—É—Ç—å –∏–∑ Incoming shares
            use_megacmd = False
            sf = (self.source_folder or '').lower()
            tf = (self.target_folder or '').lower()
            if '/incoming shares/' in sf or '/incoming shares/' in tf or sf.startswith('/incoming ') or tf.startswith('/incoming '):
                use_megacmd = True

            if use_megacmd:
                self.logger.info("üåê –ò—Å–ø–æ–ª—å–∑—É—é MEGAcmd WebDAV –∫–ª–∏–µ–Ω—Ç (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ Incoming shares)")
                self.mega_client = MegaWebDAVClient()
            else:
                self.mega_client = RcloneClient()

            # PDF –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä
            self.compressor = PDFCompressor(level=self.compression_level)

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–µ
            comp_info = self.compressor.get_compression_info()
            self.logger.info(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {list(comp_info['available_tools'].keys())}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def _process_files(self, pdf_files: List[Dict]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ PDF —Ñ–∞–π–ª–æ–≤"""
        success = True
        
        for i, file_info in enumerate(pdf_files, 1):
            self.logger.info("=" * 60)
            self.logger.info(f"üìÑ [{i}/{len(pdf_files)}] {file_info['name']}")
            self.logger.info(f"üìä –†–∞–∑–º–µ—Ä: {format_file_size(file_info['size'])}")
            
            try:
                file_success = self._process_single_file(file_info)
                if not file_success:
                    success = False
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_info['name']}: {e}")
                self.stats['failed_files'] += 1
                self.stats['errors'].append({
                    'file': file_info['name'],
                    'error': str(e),
                    'timestamp': datetime.now(timezone.utc).isoformat()
                })
                success = False
        
        return success
    
    def _process_single_file(self, file_info: Dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
        file_name = file_info['name']
        file_path = file_info['path']
        original_size = file_info['size']
        
        # –ü—É—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        input_temp_path = f"temp/input/{file_name}"
        output_temp_path = f"temp/output/{file_name}"
        backup_temp_path = f"temp/backup/{file_name}"
        
        try:
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            self.logger.info("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
            if not self.mega_client.download_file(file_path, input_temp_path):
                raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
            
            # 2. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.config.create_backup:
                backup_path = f"{self.config.backup_folder}/{file_name}"
                self.logger.debug(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: {backup_path}")
                if not self.mega_client.copy_file(file_path, backup_path):
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")
            
            # 3. –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª
            self.logger.info(f"üóúÔ∏è –°–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–∞ (—É—Ä–æ–≤–µ–Ω—å: {self.compression_level})...")
            compression_result = self.compressor.compress(input_temp_path, output_temp_path)
            
            if not compression_result['success']:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {compression_result['error']}")
            
            compressed_size = compression_result['size_after']
            bytes_saved = compression_result['bytes_saved']
            percent_saved = compression_result['percent_saved']
            
            self.logger.info(f"‚úÖ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
            self.logger.info(f"   üìä –ë—ã–ª–æ: {format_file_size(original_size)}")
            self.logger.info(f"   üìä –°—Ç–∞–ª–æ: {format_file_size(compressed_size)}")
            self.logger.info(f"   üíæ –≠–∫–æ–Ω–æ–º–∏—è: {format_file_size(bytes_saved)} ({percent_saved:.1f}%)")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            if self.config.verify_compression:
                if not self.compressor.verify_compressed_file(output_temp_path):
                    raise Exception("–°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            
            # 5. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
            target_path = f"{self.target_folder}/{file_name}"
            self.logger.info(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –≤: {target_path}")
            if not self.mega_client.upload_file(output_temp_path, target_path):
                raise Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞")
            
            # 6. –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            self.logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            if not self.mega_client.delete_file(file_path):
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
            
            # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['processed_files'] += 1
            self.stats['total_size_before'] += original_size
            self.stats['total_size_after'] += compressed_size
            self.stats['total_bytes_saved'] += bytes_saved
            
            self.stats['files'].append({
                'name': file_name,
                'original_size': original_size,
                'compressed_size': compressed_size,
                'bytes_saved': bytes_saved,
                'percent_saved': percent_saved,
                'compression_method': compression_result.get('method', 'unknown'),
                'timestamp': datetime.now(timezone.utc).isoformat()
            })
            
            self.logger.info(f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_name}: {e}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if self.config.rollback_on_error:
                self.logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                try:
                    # –õ–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞
                    pass  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
                except Exception as rollback_error:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {rollback_error}")
            
            self.stats['failed_files'] += 1
            self.stats['errors'].append({
                'file': file_name,
                'error': str(e),
                'timestamp': datetime.now(timezone.utc).isoformat()
            })
            
            return False
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for temp_path in [input_temp_path, output_temp_path, backup_temp_path]:
                temp_file = Path(temp_path)
                if temp_file.exists():
                    temp_file.unlink()
    
    def _finalize_stats(self, success: bool, error: str = None):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats['end_time'] = datetime.now(timezone.utc)
        self.stats['duration'] = (self.stats['end_time'] - self.stats['start_time']).total_seconds()
        
        if self.stats['total_size_before'] > 0:
            self.stats['total_percent_saved'] = (
                self.stats['total_bytes_saved'] / self.stats['total_size_before'] * 100
            )
        
        if error:
            self.stats['error'] = error
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._print_final_stats()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        save_statistics(self.stats)
    
    def _print_final_stats(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.logger.info("=" * 60)
        self.logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        self.logger.info("=" * 60)
        
        self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {format_duration(self.stats['duration'])}")
        self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.stats['processed_files']}")
        self.logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['failed_files']}")
        
        if self.stats['processed_files'] > 0:
            self.logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–æ —Å–∂–∞—Ç–∏—è: {format_file_size(self.stats['total_size_before'])}")
            self.logger.info(f"üìä –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {format_file_size(self.stats['total_size_after'])}")
            self.logger.info(f"üíæ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {format_file_size(self.stats['total_bytes_saved'])}")
            self.logger.info(f"üíæ –ü—Ä–æ—Ü–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏: {self.stats['total_percent_saved']:.1f}%")
        
        if self.stats['errors']:
            self.logger.info(f"‚ùå –û—à–∏–±–∫–∏:")
            for error in self.stats['errors'][-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
                self.logger.info(f"   ‚Ä¢ {error['file']}: {error['error']}")
        
        self.logger.info("=" * 60)
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            cleanup_temp_files(max_age_hours=1)
            self.logger.debug("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º Mega-–∫–ª–∏–µ–Ω—Ç (–≤–∞–∂–Ω–æ –¥–ª—è MEGAcmd WebDAV)
        try:
            if self.mega_client and hasattr(self.mega_client, 'close'):
                self.mega_client.close()
                self.logger.debug("üîö Mega-–∫–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Mega-–∫–ª–∏–µ–Ω—Ç–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    parser = argparse.ArgumentParser(
        description='–ü–∞–∫–µ—Ç–Ω—ã–π –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è Mega',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s --source "/PDF/Input" --target "/PDF/Compressed"
  %(prog)s --level high --max-files 10
  %(prog)s --log-file logs/compression.log
        """
    )
    
    parser.add_argument('--source', 
                       help='–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –≤ Mega')
    parser.add_argument('--target',
                       help='–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –≤ Mega')
    parser.add_argument('--level', 
                       choices=['low', 'medium', 'high'],
                       help='–£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è')
    parser.add_argument('--max-files', 
                       type=int,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑')
    parser.add_argument('--log-file',
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤')
    parser.add_argument('--log-level',
                       choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
                       default='INFO',
                       help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--config',
                       default='config/settings.yaml',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--dry-run',
                       action='store_true',
                       help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    
    args = parser.parse_args()
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging(args.log_file, args.log_level)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = get_config(args.config)
        validation = config.validate()
        
        if validation['errors']:
            print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for error in validation['errors']:
                print(f"   ‚Ä¢ {error}")
            return 1
        
        if validation['warnings']:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for warning in validation['warnings']:
                print(f"   ‚Ä¢ {warning}")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä
        compressor = PDFBatchCompressor(
            source_folder=args.source,
            target_folder=args.target,
            compression_level=args.level,
            max_files=args.max_files
        )

        if args.dry_run:
            print("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            # (–ª–æ–≥–∏–∫–∞ —Å—É—Ö–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–µ)

        return compressor.run()
        
    except KeyboardInterrupt:
        print("\n‚ÑπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())