#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–ª–∞—á–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º Mega
"""

import os
import logging
import time
from pathlib import Path
from typing import List, Dict, Any, Optional
import fnmatch

try:
    from mega import Mega
except ImportError:
    print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mega.py –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install mega.py")
    raise

from config import get_config
from utils import format_file_size, validate_file_path


class MegaClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mega –æ–±–ª–∞—á–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""
    
    def __init__(self):
        self.config = get_config()
        self.logger = logging.getLogger(__name__)
        self.mega = None
        self._authenticated = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.max_retries = 3
        self.retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Mega
        self._connect()
    
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mega –∞–∫–∫–∞—É–Ω—Ç—É"""
        email = self.config.mega_email
        password = self.config.mega_password
        
        if not email or not password:
            raise ValueError(
                "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è Mega. "
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è MEGA_EMAIL –∏ MEGA_PASSWORD"
            )
        
        try:
            self.logger.info("üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mega...")
            self.mega = Mega()
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            for attempt in range(self.max_retries):
                try:
                    self.mega = self.mega.login(email, password)
                    self._authenticated = True
                    self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Mega")
                    break
                    
                except Exception as e:
                    if attempt == self.max_retries - 1:
                        raise
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    time.sleep(self.retry_delay)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É
            self._check_quota()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mega: {e}")
            raise
    
    def _check_quota(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç—ã Mega –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            quota_info = self.mega.get_quota()
            total_space = quota_info['total']
            used_space = quota_info['used']
            free_space = total_space - used_space
            
            self.logger.info(f"üíæ Mega –∫–≤–æ—Ç–∞:")
            self.logger.info(f"   üìä –í—Å–µ–≥–æ: {format_file_size(total_space)}")
            self.logger.info(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_file_size(used_space)}")
            self.logger.info(f"   üìä –°–≤–æ–±–æ–¥–Ω–æ: {format_file_size(free_space)}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –º–∞–ª–æ
            if free_space < 100 * 1024 * 1024:  # < 100 MB
                self.logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤ Mega: {format_file_size(free_space)}")
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–µ: {e}")
    
    def _ensure_connected(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Mega"""
        if not self._authenticated or not self.mega:
            raise ConnectionError("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Mega")
    
    def _retry_on_failure(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self.max_retries):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                if attempt == self.max_retries - 1:
                    raise
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                time.sleep(self.retry_delay * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    
    def list_pdf_files(self, folder_path: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ PDF —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
        
        Args:
            folder_path: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤ Mega
            
        Returns:
            —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
        """
        self._ensure_connected()
        
        try:
            self.logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {folder_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            files = self._retry_on_failure(self.mega.get_files)
            
            pdf_files = []
            skip_patterns = self.config.skip_patterns
            
            for file_id, file_info in files.items():
                if not isinstance(file_info, dict) or 'a' not in file_info:
                    continue
                
                file_name = file_info['a'].get('n', '')
                file_size = file_info.get('s', 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                file_path = self._get_file_path(file_id, files)
                if not file_path or not file_path.startswith(folder_path.rstrip('/')):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                if not file_name.lower().endswith(('.pdf', '.PDF')):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                if any(fnmatch.fnmatch(file_name.lower(), pattern.lower()) 
                       for pattern in skip_patterns):
                    self.logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {file_name}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                min_size = self.config.min_file_size_kb * 1024
                max_size = self.config.max_file_size_mb * 1024 * 1024
                
                if file_size < min_size:
                    self.logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª: {file_name} ({format_file_size(file_size)})")
                    continue
                
                if file_size > max_size:
                    self.logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {file_name} ({format_file_size(file_size)})")
                    continue
                
                pdf_files.append({
                    'id': file_id,
                    'name': file_name,
                    'size': file_size,
                    'path': file_path,
                    'parent_id': file_info.get('p'),
                    'created_time': file_info.get('ts', 0)
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            pdf_files.sort(key=lambda x: x['created_time'])
            
            self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
            for file_info in pdf_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                self.logger.info(f"   üìÑ {file_info['name']} ({format_file_size(file_info['size'])})")
            
            if len(pdf_files) > 5:
                self.logger.info(f"   üìÑ ... –∏ –µ—â–µ {len(pdf_files) - 5} —Ñ–∞–π–ª–æ–≤")
            
            return pdf_files
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            raise
    
    def _get_file_path(self, file_id: str, all_files: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
        try:
            path_parts = []
            current_id = file_id
            
            while current_id in all_files:
                file_info = all_files[current_id]
                if 'a' not in file_info:
                    break
                
                name = file_info['a'].get('n', '')
                if name:
                    path_parts.insert(0, name)
                
                parent_id = file_info.get('p')
                if not parent_id:
                    break
                    
                current_id = parent_id
            
            if path_parts:
                return '/' + '/'.join(path_parts)
            else:
                return ''
                
        except Exception:
            return ''
    
    def download_file(self, file_path: str, local_path: str) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Mega
        
        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Mega
            local_path: –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        self._ensure_connected()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞
            local_file = Path(local_path)
            local_file.parent.mkdir(parents=True, exist_ok=True)
            
            self.logger.debug(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {file_path} -> {local_path}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            self._retry_on_failure(
                self.mega.download_url, 
                file_path, 
                dest_path=str(local_file.parent),
                dest_filename=local_file.name
            )
            
            if local_file.exists():
                file_size = local_file.stat().st_size
                self.logger.debug(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {format_file_size(file_size)}")
                return True
            else:
                self.logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {local_path}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {file_path}: {e}")
            return False
    
    def upload_file(self, local_path: str, mega_path: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Mega
        
        Args:
            local_path: –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            mega_path: –ø—É—Ç—å –≤ Mega –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        self._ensure_connected()
        
        local_file = Path(local_path)
        if not local_file.exists():
            self.logger.error(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}")
            return False
        
        try:
            file_size = local_file.stat().st_size
            self.logger.debug(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ {local_path} -> {mega_path} ({format_file_size(file_size)})")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            mega_dir = str(Path(mega_path).parent)
            mega_filename = Path(mega_path).name
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self._ensure_folder_exists(mega_dir)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            self._retry_on_failure(
                self.mega.upload,
                str(local_file),
                dest=mega_dir,
                dest_filename=mega_filename
            )
            
            self.logger.debug(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {mega_filename}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {local_path}: {e}")
            return False
    
    def _ensure_folder_exists(self, folder_path: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –≤ Mega –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not folder_path or folder_path == '/':
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            files = self.mega.get_files()
            
            # –ò—â–µ–º –ø–∞–ø–∫—É
            for file_id, file_info in files.items():
                if (isinstance(file_info, dict) and 
                    'a' in file_info and 
                    file_info['a'].get('n') == Path(folder_path).name and
                    file_info.get('t') == 1):  # t=1 –æ–∑–Ω–∞—á–∞–µ—Ç –ø–∞–ø–∫—É
                    return  # –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
            parent_dir = str(Path(folder_path).parent)
            folder_name = Path(folder_path).name
            
            if parent_dir != '/':
                self._ensure_folder_exists(parent_dir)
            
            self.mega.create_folder(folder_name, dest=parent_dir)
            self.logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_path}")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {folder_path}: {e}")
    
    def delete_file(self, file_path: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Mega
        
        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Mega
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        self._ensure_connected()
        
        try:
            self.logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
            
            # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏
            files = self.mega.get_files()
            file_id = None
            
            for fid, file_info in files.items():
                if (isinstance(file_info, dict) and 
                    self._get_file_path(fid, files) == file_path):
                    file_id = fid
                    break
            
            if file_id:
                self._retry_on_failure(self.mega.delete, file_id)
                self.logger.debug(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {Path(file_path).name}")
                return True
            else:
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
            return False
    
    def move_file(self, source_path: str, target_path: str) -> bool:
        """
        –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ Mega
        
        Args:
            source_path: –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
            target_path: —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        self._ensure_connected()
        
        try:
            self.logger.debug(f"üìã –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {source_path} -> {target_path}")
            
            # –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            if self.copy_file(source_path, target_path):
                # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π
                return self.delete_file(source_path)
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {source_path}: {e}")
            return False
    
    def copy_file(self, source_path: str, target_path: str) -> bool:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ Mega
        
        Args:
            source_path: –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
            target_path: —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        # –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
            try:
                if self.download_file(source_path, tmp_file.name):
                    return self.upload_file(tmp_file.name, target_path)
                return False
            finally:
                Path(tmp_file.name).unlink(missing_ok=True)
    
    def get_folder_info(self, folder_path: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–ø–∫–µ
        
        Args:
            folder_path: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
            
        Returns:
            —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–ø–∫–µ
        """
        self._ensure_connected()
        
        try:
            pdf_files = self.list_pdf_files(folder_path)
            
            total_size = sum(f['size'] for f in pdf_files)
            
            return {
                'path': folder_path,
                'total_files': len(pdf_files),
                'total_size': total_size,
                'files': pdf_files
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–ø–∫–µ {folder_path}: {e}")
            return {'path': folder_path, 'total_files': 0, 'total_size': 0, 'files': []}


def test_mega_client():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mega –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        client = MegaClient()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        input_folder = client.config.input_folder
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {input_folder}")
        
        folder_info = client.get_folder_info(input_folder)
        print(f"üìä –§–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {folder_info['total_files']}")
        print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {format_file_size(folder_info['total_size'])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


if __name__ == "__main__":
    test_mega_client()
