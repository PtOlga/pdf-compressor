#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""

import os
import sys
import json
import requests
from pathlib import Path
from datetime import datetime


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not self.bot_token or not self.chat_id:
            raise ValueError("Telegram credentials not configured")
        
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
        
    def send_message(self, text: str, parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        url = f"{self.api_url}/sendMessage"
        
        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            return self._send_long_message(text, parse_mode)
        
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, data=payload, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            return result.get('ok', False)
            
        except Exception as e:
            print(f"‚ùå Error sending Telegram message: {e}")
            return False
    
    def _send_long_message(self, text: str, parse_mode: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º"""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        parts = []
        current_part = ""
        
        lines = text.split('\n')
        
        for line in lines:
            if len(current_part + line + '\n') > 4000:
                if current_part:
                    parts.append(current_part.rstrip())
                    current_part = line + '\n'
                else:
                    # –°—Ç—Ä–æ–∫–∞ —Å–∞–º–∞ –ø–æ —Å–µ–±–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
                    parts.append(line[:4000])
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part.rstrip())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        success = True
        for i, part in enumerate(parts):
            if i == 0:
                message_text = part
            else:
                message_text = f"*(continued {i+1}/{len(parts)})*\n\n{part}"
            
            if not self.send_message(message_text, parse_mode):
                success = False
        
        return success
    
    def send_document(self, file_path: str, caption: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        
        url = f"{self.api_url}/sendDocument"
        
        try:
            with open(file_path, 'rb') as file:
                files = {'document': file}
                data = {
                    'chat_id': self.chat_id,
                    'caption': caption
                }
                
                response = requests.post(url, files=files, data=data, timeout=30)
                response.raise_for_status()
                
                result = response.json()
                return result.get('ok', False)
                
        except Exception as e:
            print(f"‚ùå Error sending document: {e}")
            return False


def load_stats(stats_path: str = 'temp/logs/stats.json') -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    
    stats_file = Path(stats_path)
    if not stats_file.exists():
        return {}
    
    try:
        with open(stats_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception:
        return {}


def format_file_size(bytes_size: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if bytes_size == 0:
        return "0 B"
    
    for unit in ['B', 'KB', 'MB', 'GB']:
        if bytes_size < 1024.0:
            return f"{bytes_size:.1f} {unit}"
        bytes_size /= 1024.0
    return f"{bytes_size:.1f} TB"


def create_telegram_message(report_content: str = "", stats: dict = None) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
    
    if not stats:
        stats = {}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    processed = stats.get('processed_files', 0)
    failed = stats.get('failed_files', 0)
    
    if processed > 0 and failed == 0:
        status_emoji = "‚úÖ"
        status = "SUCCESS"
    elif processed > 0 and failed > 0:
        status_emoji = "‚ö†Ô∏è"
        status = "PARTIAL"
    elif failed > 0:
        status_emoji = "‚ùå"
        status = "FAILED"
    else:
        status_emoji = "‚ÑπÔ∏è"
        status = "NO FILES"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    message = f"{status_emoji} *PDF Compression {status}*\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += f"üìä *Summary:*\n"
    
    if processed > 0:
        message += f"‚úÖ Processed: *{processed}* files\n"
    
    if failed > 0:
        message += f"‚ùå Failed: *{failed}* files\n"
    
    # –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞
    if stats.get('total_bytes_saved', 0) > 0:
        saved_size = format_file_size(stats['total_bytes_saved'])
        percent_saved = stats.get('total_percent_saved', 0)
        message += f"üíæ Space saved: *{saved_size}* ({percent_saved:.1f}%)\n"
        
        if stats.get('total_size_before', 0) > 0:
            size_before = format_file_size(stats['total_size_before'])
            size_after = format_file_size(stats.get('total_size_after', 0))
            message += f"   üìä Before: {size_before}\n"
            message += f"   üìä After: {size_after}\n"
    
    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    duration = stats.get('duration', 0)
    if duration > 0:
        if duration < 60:
            time_str = f"{duration:.1f} sec"
        elif duration < 3600:
            time_str = f"{duration/60:.1f} min"
        else:
            time_str = f"{duration/3600:.1f} hours"
        
        message += f"‚è±Ô∏è Duration: {time_str}\n"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    compression_level = stats.get('compression_level', 'unknown')
    message += f"üóúÔ∏è Level: {compression_level}\n"
    
    # –ü–∞–ø–∫–∏
    if stats.get('source_folder'):
        message += f"üìÅ Source: `{stats['source_folder']}`\n"
    if stats.get('target_folder'):
        message += f"üìÅ Target: `{stats['target_folder']}`\n"
    
    message += "\n"
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∞–π–ª–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ–º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤)
    files = stats.get('files', [])
    if files and len(files) <= 5:
        message += f"üìÑ *Files processed:*\n"
        for file_info in files:
            if isinstance(file_info, dict):
                name = file_info.get('name', 'unknown')
                percent = file_info.get('percent_saved', 0)
                message += f"‚Ä¢ {name}: {percent:.1f}%\n"
        message += "\n"
    elif len(files) > 5:
        message += f"üìÑ Processed {len(files)} files\n\n"
    
    # –û—à–∏–±–∫–∏ (–ø–µ—Ä–≤—ã–µ 3)
    errors = stats.get('errors', [])
    if errors:
        message += f"‚ùå *Errors ({len(errors)}):*\n"
        for error in errors[:3]:
            if isinstance(error, dict):
                file_name = error.get('file', 'unknown')
                error_msg = error.get('error', 'unknown')
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                if len(error_msg) > 50:
                    error_msg = error_msg[:50] + "..."
                message += f"‚Ä¢ {file_name}: {error_msg}\n"
            elif isinstance(error, str):
                if len(error) > 60:
                    error = error[:60] + "..."
                message += f"‚Ä¢ {error}\n"
        
        if len(errors) > 3:
            message += f"‚Ä¢ ... and {len(errors) - 3} more\n"
        message += "\n"
    
    # –í—Ä–µ–º—è
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M UTC')
    message += f"üïí {timestamp}"
    
    return message


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if len(sys.argv) < 2:
            print("Usage: python send_notification.py <report_file> [stats_file]")
            sys.exit(1)
        
        report_file = sys.argv[1]
        stats_file = sys.argv[2] if len(sys.argv) > 2 else 'temp/logs/stats.json'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        if not os.getenv('TELEGRAM_BOT_TOKEN') or not os.getenv('TELEGRAM_CHAT_ID'):
            print("‚ÑπÔ∏è Telegram credentials not configured, skipping notification")
            sys.exit(0)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = load_stats(stats_file)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        report_content = ""
        if Path(report_file).exists():
            with open(report_file, 'r', encoding='utf-8') as f:
                report_content = f.read()
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notifier = TelegramNotifier()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = create_telegram_message(report_content, stats)
        
        print("üì± Sending Telegram notification...")
        success = notifier.send_message(message)
        
        if success:
            print("‚úÖ Telegram notification sent successfully")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –±–æ–ª—å—à–æ–π
            if Path(report_file).exists() and len(report_content) > 2000:
                print("üìé Sending detailed report as document...")
                doc_success = notifier.send_document(
                    report_file, 
                    "üìÑ Detailed compression report"
                )
                if doc_success:
                    print("‚úÖ Detailed report sent successfully")
                else:
                    print("‚ö†Ô∏è Failed to send detailed report")
        else:
            print("‚ùå Failed to send Telegram notification")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Error sending notification: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
