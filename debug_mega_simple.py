#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import sys
import os
from pathlib import Path
import yaml

def debug_config():
    """–û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    print("=" * 60)
    print("üîç –û–¢–õ–ê–î–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"   MEGA_EMAIL: {'‚úÖ SET' if os.getenv('MEGA_EMAIL') else '‚ùå NOT SET'}")
    print(f"   MEGA_PASSWORD: {'‚úÖ SET' if os.getenv('MEGA_PASSWORD') else '‚ùå NOT SET'}")
    print(f"   TELEGRAM_BOT_TOKEN: {'‚úÖ SET' if os.getenv('TELEGRAM_BOT_TOKEN') else '‚ùå NOT SET'}")
    print(f"   TELEGRAM_CHAT_ID: {'‚úÖ SET' if os.getenv('TELEGRAM_CHAT_ID') else '‚ùå NOT SET'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    config_path = Path("config/settings.yaml")
    print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª:")
    print(f"   –ü—É—Ç—å: {config_path}")
    print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ YES' if config_path.exists() else '‚ùå NO'}")
    
    if config_path.exists():
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            print(f"\nüìÅ –ü–∞–ø–∫–∏:")
            folders = config.get('folders', {})
            print(f"   Input: {folders.get('input', 'NOT SET')}")
            print(f"   Output: {folders.get('output', 'NOT SET')}")
            print(f"   Backup: {folders.get('backup', 'NOT SET')}")
            
            print(f"\nüóúÔ∏è –°–∂–∞—Ç–∏–µ:")
            compression = config.get('compression', {})
            print(f"   Default level: {compression.get('default_level', 'NOT SET')}")
            print(f"   Available levels: {list(compression.get('levels', {}).keys())}")
            
            print(f"\nüìä –õ–∏–º–∏—Ç—ã:")
            limits = config.get('limits', {})
            print(f"   Max files per run: {limits.get('max_files_per_run', 'NOT SET')}")
            print(f"   Max file size (MB): {limits.get('max_file_size_mb', 'NOT SET')}")
            print(f"   Min file size (KB): {limits.get('min_file_size_kb', 'NOT SET')}")
            
            print(f"\nüîç –§–∏–ª—å—Ç—Ä—ã:")
            filters = config.get('filters', {})
            print(f"   Skip patterns: {filters.get('skip_patterns', [])}")
            print(f"   Min compression %: {filters.get('min_compression_percent', 'NOT SET')}")
            
            print(f"\nüì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            notifications = config.get('notifications', {})
            telegram = notifications.get('telegram', {})
            print(f"   Telegram enabled: {telegram.get('enabled', False)}")
            
            print(f"\nüõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
            safety = config.get('safety', {})
            print(f"   Create backup: {safety.get('create_backup', False)}")
            print(f"   Verify compression: {safety.get('verify_compression', False)}")
            print(f"   Rollback on error: {safety.get('rollback_on_error', False)}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    print(f"\nüìÑ .env —Ñ–∞–π–ª:")
    env_path = Path(".env")
    print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ YES' if env_path.exists() else '‚ùå NO'}")
    
    if env_path.exists():
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            print(f"   –°—Ç—Ä–æ–∫: {len(lines)}")
            for line in lines:
                if '=' in line:
                    key = line.split('=')[0].strip()
                    print(f"   - {key}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    print(f"\nüìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    required_files = [
        'src/main.py',
        'src/compressor.py',
        'src/mega_client.py',
        'src/config.py',
        'src/utils.py',
        'config/settings.yaml',
        'requirements.txt'
    ]
    
    for file_path in required_files:
        exists = Path(file_path).exists()
        status = "‚úÖ" if exists else "‚ùå"
        print(f"   {status} {file_path}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("=" * 60)
    
    return 0

if __name__ == "__main__":
    sys.exit(debug_config())

