name: Manual PDF Compression

on:
  workflow_dispatch:
    inputs:
      source_folder:
        description: 'Source folder in Mega'
        required: true
        default: '/PDF/Input'
        type: string
      target_folder:
        description: 'Target folder in Mega'
        required: true
        default: '/PDF/Compressed'
        type: string
      compression_level:
        description: 'Compression level'
        required: true
        default: 'medium'
        type: choice
        options:
          - low
          - medium
          - high
      max_files:
        description: 'Maximum files to process'
        required: true
        default: '50'
        type: string
      file_pattern:
        description: 'File pattern to match (e.g., *.pdf, report_*.pdf)'
        required: false
        default: '*.pdf'
        type: string
      create_backup:
        description: 'Create backup before compression'
        required: false
        default: true
        type: boolean
      verify_files:
        description: 'Verify compressed files integrity'
        required: false
        default: true
        type: boolean
      delete_originals:
        description: 'Delete original files after compression'
        required: false
        default: true
        type: boolean
      dry_run:
        description: 'Test run (no actual changes)'
        required: false
        default: false
        type: boolean
      send_notification:
        description: 'Send Telegram notification'
        required: false
        default: true
        type: boolean

env:
  MEGA_EMAIL: ${{ secrets.MEGA_EMAIL }}
  MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  manual-compression:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 —á–∞—Å–æ–≤
    
    steps:
    - name: üìã Checkout repository
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: üì¶ Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ghostscript qpdf poppler-utils
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üìÅ Setup workspace
      run: |
        mkdir -p temp/{input,output,logs,backup}
        
    - name: üìä Pre-run information
      run: |
        echo "## üéØ Manual Compression Job" >> $GITHUB_STEP_SUMMARY
        echo "**Parameters:**" >> $GITHUB_STEP_SUMMARY
        echo "- Source: \`${{ github.event.inputs.source_folder }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Target: \`${{ github.event.inputs.target_folder }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Level: \`${{ github.event.inputs.compression_level }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Max files: \`${{ github.event.inputs.max_files }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Pattern: \`${{ github.event.inputs.file_pattern }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Backup: \`${{ github.event.inputs.create_backup }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Verify: \`${{ github.event.inputs.verify_files }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Delete originals: \`${{ github.event.inputs.delete_originals }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Dry run: \`${{ github.event.inputs.dry_run }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
    - name: üîß Configure settings
      run: |
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        python3 << 'EOF'
        import yaml
        import os
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open('config/settings.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config['safety']['create_backup'] = '${{ github.event.inputs.create_backup }}' == 'true'
        config['safety']['verify_compression'] = '${{ github.event.inputs.verify_files }}' == 'true'
        config['limits']['max_files_per_run'] = int('${{ github.event.inputs.max_files }}')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open('temp/manual_settings.yaml', 'w') as f:
            yaml.dump(config, f, default_flow_style=False)
        
        print("‚úÖ Configuration updated")
        EOF
        
    - name: üóúÔ∏è Run compression
      id: compression
      run: |
        cd src
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        ARGS=(
          "--source" "${{ github.event.inputs.source_folder }}"
          "--target" "${{ github.event.inputs.target_folder }}"
          "--level" "${{ github.event.inputs.compression_level }}"
          "--max-files" "${{ github.event.inputs.max_files }}"
          "--log-file" "../temp/logs/manual_compression.log"
          "--log-level" "INFO"
          "--config" "../temp/manual_settings.yaml"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º dry-run –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
          ARGS+=("--dry-run")
        fi
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é
        echo "üöÄ Starting compression with parameters: ${ARGS[@]}"
        python main.py "${ARGS[@]}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
        echo "exit_code=$?" >> $GITHUB_OUTPUT
        
    - name: üìä Process results
      if: always()
      run: |
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç generate_report.py
        python scripts/generate_report.py temp/logs/manual_compression.log > temp/detailed_report.md
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ step summary
        if [[ -f temp/detailed_report.md ]]; then
          cat temp/detailed_report.md >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: üì± Send notification
      if: always() && github.event.inputs.send_notification == 'true' && env.TELEGRAM_BOT_TOKEN != ''
      run: |
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç send_notification.py
        python scripts/send_notification.py temp/detailed_report.md
        
    - name: üìÇ Archive results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: manual-compression-${{ github.run_number }}-${{ github.event.inputs.compression_level }}
        path: |
          temp/logs/
          temp/detailed_report.md
          temp/manual_settings.yaml
        retention-days: 90
        
    - name: üìà Update statistics
      if: success() && github.event.inputs.dry_run == 'false'
      run: |
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç update_readme_stats.py
        python scripts/update_readme_stats.py
        
        # –ö–æ–º–º–∏—Ç–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if [[ -n "$(git status --porcelain)" ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "Manual Compression Bot"
          git add -A
          git commit -m "üìä Update stats after manual compression [skip ci]"
          git push
        fi
        
    - name: üéØ Job summary
      if: always()
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "## üìã Job Completion" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.compression.outputs.exit_code }}" == "0" ]]; then
          echo "‚úÖ **Status:** Completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Status:** Failed (exit code: ${{ steps.compression.outputs.exit_code }})" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "‚è∞ **Completed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "üîó **Artifacts:** Available for download above" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ÑπÔ∏è **Note:** This was a dry run - no actual changes were made" >> $GITHUB_STEP_SUMMARY
        fi